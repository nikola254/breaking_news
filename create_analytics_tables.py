#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""

import sys
import os
from clickhouse_driver import Client

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config

def create_analytics_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
    client = Client(
        host=Config.CLICKHOUSE_HOST,
        port=Config.CLICKHOUSE_NATIVE_PORT,
        user=Config.CLICKHOUSE_USER,
        password=Config.CLICKHOUSE_PASSWORD
    )
    
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        client.execute('CREATE DATABASE IF NOT EXISTS news')
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'news' –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö news
    client = Client(
        host=Config.CLICKHOUSE_HOST,
        port=Config.CLICKHOUSE_NATIVE_PORT,
        user=Config.CLICKHOUSE_USER,
        password=Config.CLICKHOUSE_PASSWORD,
        database='news'
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    try:
        query = '''
            CREATE TABLE IF NOT EXISTS ukraine_headlines (
                id String,
                title String,
                content String,
                url String,
                source String,
                author String,
                date DateTime,
                category String,
                sentiment_score Float32,
                tension_score Float32,
                conflict_level Float32,
                urgency_factor Float32,
                emotional_intensity Float32,
                tension_category String,
                created_at DateTime DEFAULT now()
            ) ENGINE = MergeTree()
            ORDER BY (date, category, id)
        '''
        client.execute(query)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ukraine_headlines —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ukraine_headlines: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Twitter –¥–∞–Ω–Ω—ã—Ö
    try:
        query = '''
            CREATE TABLE IF NOT EXISTS twitter_headlines (
                id String,
                title String,
                content String,
                url String,
                source String,
                author String,
                date DateTime,
                category String,
                sentiment_score Float32,
                tension_score Float32,
                conflict_level Float32,
                urgency_factor Float32,
                emotional_intensity Float32,
                tension_category String,
                created_at DateTime DEFAULT now()
            ) ENGINE = MergeTree()
            ORDER BY (date, category, id)
        '''
        client.execute(query)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ twitter_headlines —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã twitter_headlines: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        query = '''
            CREATE TABLE IF NOT EXISTS analytics_summary (
                date Date,
                hour UInt8,
                category String,
                news_count UInt32,
                avg_sentiment Float32,
                avg_tension Float32,
                max_tension Float32,
                critical_count UInt32,
                high_count UInt32,
                medium_count UInt32,
                low_count UInt32,
                minimal_count UInt32,
                top_sources Array(String),
                created_at DateTime DEFAULT now()
            ) ENGINE = MergeTree()
            ORDER BY (date, hour, category)
        '''
        client.execute(query)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ analytics_summary —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã analytics_summary: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    try:
        query = '''
            CREATE MATERIALIZED VIEW IF NOT EXISTS analytics_summary_mv TO analytics_summary AS
            SELECT 
                toDate(date) as date,
                toHour(date) as hour,
                category,
                count() as news_count,
                avg(sentiment_score) as avg_sentiment,
                avg(tension_score) as avg_tension,
                max(tension_score) as max_tension,
                countIf(tension_category = 'critical') as critical_count,
                countIf(tension_category = 'high') as high_count,
                countIf(tension_category = 'medium') as medium_count,
                countIf(tension_category = 'low') as low_count,
                countIf(tension_category = 'minimal') as minimal_count,
                groupArray(source) as top_sources,
                now() as created_at
            FROM ukraine_headlines
            GROUP BY date, hour, category
        '''
        client.execute(query)
        print("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ analytics_summary_mv —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    print("\nüéØ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("=" * 50)
    
    if create_analytics_tables():
        print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("‚Ä¢ ukraine_headlines - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        print("‚Ä¢ twitter_headlines - —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è Twitter –¥–∞–Ω–Ω—ã—Ö")
        print("‚Ä¢ analytics_summary - –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        print("‚Ä¢ analytics_summary_mv - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")

if __name__ == "__main__":
    main()