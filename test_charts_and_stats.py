#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time

def test_api_endpoint(url, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é: {description}")
    print(f"URL: {url}")
    
    try:
        response = requests.get(url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, dict):
                    print(f"üìä –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    if 'data' in data:
                        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data['data']) if isinstance(data['data'], list) else 'N/A'}")
                    elif 'categories' in data:
                        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data['categories']) if isinstance(data['categories'], list) else 'N/A'}")
                    elif 'labels' in data and 'datasets' in data:
                        print(f"üìà –ì—Ä–∞—Ñ–∏–∫: {len(data['labels'])} –º–µ—Ç–æ–∫, {len(data['datasets'])} –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
                    
                elif isinstance(data, list):
                    print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}")
                    
                return True
                
            except json.JSONDecodeError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    base_url = "http://127.0.0.1:5000"
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        ("/api/database/statistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("/api/news/statistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"),
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        ("/api/charts/category-distribution", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"),
        ("/api/charts/timeline", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è"),
        ("/api/charts/source-distribution", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"),
        ("/api/charts/sentiment-analysis", "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"),
        
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        ("/api/ukraine/analytics/timeline", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –£–∫—Ä–∞–∏–Ω—ã"),
        ("/api/ukraine/analytics/categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –£–∫—Ä–∞–∏–Ω—ã"),
        ("/api/ukraine/analytics/sentiment", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –£–∫—Ä–∞–∏–Ω—ã"),
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã
        ("/api/forecast/ukraine-conflict", "–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"),
        ("/api/forecast/categories", "–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"),
        
        # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        ("/api/social/tension-analysis", "–ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏"),
        ("/api/social/extremism-detection", "–î–µ—Ç–µ–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞"),
    ]
    
    successful_tests = 0
    total_tests = len(endpoints)
    
    for endpoint, description in endpoints:
        url = base_url + endpoint
        if test_api_endpoint(url, description):
            successful_tests += 1
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    elif successful_tests > total_tests * 0.8:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üö® –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö")

if __name__ == "__main__":
    main()