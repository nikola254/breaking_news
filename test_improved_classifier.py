#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from ai.content_classifier import ExtremistContentClassifier
from test_data.extremism_training_dataset import EXTREMISM_TRAINING_DATASET, get_training_data, get_dataset_stats

def test_classifier_with_dataset():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    classifier = ExtremistContentClassifier()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    stats = get_dataset_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(f"üìä –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {stats['normal']} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {stats['suspicious']} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"üö® –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {stats['extremist']} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"üìà –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats['total']}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = {
        'normal': {'correct': 0, 'total': 0, 'misclassified': []},
        'suspicious': {'correct': 0, 'total': 0, 'misclassified': []},
        'extremist': {'correct': 0, 'total': 0, 'misclassified': []}
    }
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    for content_type, examples in EXTREMISM_TRAINING_DATASET.items():
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {content_type.upper()} –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
        print("-" * 40)
        
        for i, example in enumerate(examples, 1):
            text = example['text']
            expected_classification = example['classification']
            expected_score = example['extremism_score']
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            result = classifier.classify_content(text)
            predicted_label = result['label']
            confidence = result['confidence']
            risk_score = result['risk_score']
            keywords = result['keywords']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            is_correct = predicted_label == expected_classification
            results[content_type]['total'] += 1
            
            if is_correct:
                results[content_type]['correct'] += 1
                status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û"
            else:
                results[content_type]['misclassified'].append({
                    'text': text[:100] + "..." if len(text) > 100 else text,
                    'expected': expected_classification,
                    'predicted': predicted_label,
                    'confidence': confidence
                })
                status = "‚ùå –û–®–ò–ë–ö–ê"
            
            print(f"\n–ü—Ä–∏–º–µ—Ä {i}: {status}")
            print(f"üìù –¢–µ–∫—Å—Ç: {text[:80]}{'...' if len(text) > 80 else ''}")
            print(f"üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_classification}")
            print(f"ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {predicted_label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            print(f"üìä –†–∏—Å–∫-—Å–∫–æ—Ä: {risk_score}")
            if keywords:
                print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords[:5])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
            if 'extremist_phrases' in example and example['extremist_phrases']:
                print(f"üö® –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã: {', '.join(example['extremist_phrases'])}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ß–ù–û–°–¢–ò")
    print("=" * 60)
    
    total_correct = 0
    total_examples = 0
    
    for content_type, result in results.items():
        accuracy = (result['correct'] / result['total']) * 100 if result['total'] > 0 else 0
        total_correct += result['correct']
        total_examples += result['total']
        
        print(f"\n{content_type.upper()}:")
        print(f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {result['correct']}/{result['total']} ({accuracy:.1f}%)")
        
        if result['misclassified']:
            print(f"  –û—à–∏–±–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            for error in result['misclassified']:
                print(f"    - –û–∂–∏–¥–∞–ª–æ—Å—å '{error['expected']}', –ø–æ–ª—É—á–µ–Ω–æ '{error['predicted']}' ({error['confidence']:.2f})")
    
    overall_accuracy = (total_correct / total_examples) * 100 if total_examples > 0 else 0
    print(f"\nüéØ –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {total_correct}/{total_examples} ({overall_accuracy:.1f}%)")
    
    return results

def test_specific_examples():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–ò–ú–ï–†–ê–•")
    print("=" * 60)
    
    classifier = ExtremistContentClassifier()
    
    test_examples = [
        {
            "text": "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ!",
            "expected": "normal"
        },
        {
            "text": "–≠—Ç–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–≤—Å–µ–º –æ–±–Ω–∞–≥–ª–µ–ª–∏! –ü–æ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏–º, –∫—Ç–æ –∑–¥–µ—Å—å —Ö–æ–∑—è–∏–Ω!",
            "expected": "suspicious"
        },
        {
            "text": "–°–º–µ—Ä—Ç—å –≤—Ä–∞–≥–∞–º –Ω–∞—Ä–æ–¥–∞! –ü–æ—Ä–∞ –≤–∑—è—Ç—å –æ—Ä—É–∂–∏–µ –∏ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π!",
            "expected": "extremist"
        }
    ]
    
    for i, example in enumerate(test_examples, 1):
        print(f"\n--- –ü—Ä–∏–º–µ—Ä {i} ---")
        result = classifier.classify_content(example['text'])
        
        print(f"üìù –¢–µ–∫—Å—Ç: {example['text']}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {example['expected']}")
        print(f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['label']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
        print(f"üìä –†–∏—Å–∫-—Å–∫–æ—Ä: {result['risk_score']}")
        
        if result['keywords']:
            print(f"üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(result['keywords'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if result.get('highlighted_text'):
            print(f"üé® –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result['highlighted_text']}")

def save_test_results(results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = test_classifier_with_dataset()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
        test_specific_examples()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_test_results(results)
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()