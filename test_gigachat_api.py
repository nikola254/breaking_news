#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GigaChat API
"""

import os
import requests
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_gigachat_auth(key_id, secret):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ GigaChat"""
    try:
        auth_url = "https://auth.iam.sbercloud.ru/auth/system/openid/token"
        
        auth_data = {
            'grant_type': 'access_key',
            'client_id': key_id,
            'client_secret': secret
        }
        
        logger.info("–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞...")
        response = requests.post(auth_url, data=auth_data, timeout=30)
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data['access_token']
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return access_token
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def test_gigachat_api(access_token, project_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å –∫ GigaChat"""
    try:
        api_url = "https://gigachat.api.cloud.ru/api/gigachat/v1/chat/completions"
        
        payload = {
            "messages": [
                {
                    "role": "user",
                    "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
                }
            ],
            "model": "GigaChat",
            "options": {
                "temperature": 0.3,
                "top_p": 0.95,
                "max_tokens": 100,
                "repetition_penalty": 1.0,
                "max_alternatives": 1
            },
            "project_id": project_id
        }
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}'
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat API...")
        response = requests.post(api_url, json=payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            response_data = response.json()
            logger.info("‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
            
            if 'alternatives' in response_data and len(response_data['alternatives']) > 0:
                content = response_data['alternatives'][0]['message']['content']
                logger.info(f"–û—Ç–≤–µ—Ç GigaChat: {content}")
                return True
            else:
                logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat API ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    key_id = 'a2512b4c794de9b61a5971a31a831ab2'
    secret = '328eba3d08e4b929a5eeddad3110e7f7'
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Project ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
    project_id = os.environ.get('GIGACHAT_PROJECT_ID', 'test_project_id')
    
    logger.info(f"Key ID: {key_id[:10]}...")
    logger.info(f"Project ID: {project_id}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    access_token = test_gigachat_auth(key_id, secret)
    if not access_token:
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    success = test_gigachat_api(access_token, project_id)
    
    if success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! GigaChat API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    main()
