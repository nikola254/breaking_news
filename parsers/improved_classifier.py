"""
Улучшенный классификатор новостей на 5 категорий
С расширенными ключевыми словами и лучшей точностью
"""
import re
from typing import Dict, List, Tuple, Optional

class ImprovedNewsClassifier:
    """Улучшенный классификатор новостей"""
    
    def __init__(self):
        # Расширенные ключевые слова для каждой категории
        self.category_keywords = {
            'military_operations': {
                'primary': [
                    # Военные действия
                    'атак', 'бой', 'сраж', 'наступ', 'оборон', 'операц', 'взрыв', 'обстрел',
                    'удар', 'ракет', 'снаряд', 'бомб', 'авиа', 'дрон', 'бпла', 'танк',
                    'артиллер', 'минометн', 'град', 'залп', 'огон', 'стрельб',
                    # Военные силы
                    'всу', 'вс рф', 'армия', 'войск', 'солдат', 'военн', 'офицер',
                    'командир', 'генерал', 'батальон', 'бригад', 'дивизи', 'полк',
                    'фронт', 'линия фронта', 'позици', 'укрепл', 'окоп',
                    # Территории и города на линии фронта
                    'донецк', 'луганск', 'мариупол', 'бахмут', 'артемовск', 'авдеевка',
                    'херсон', 'запорожье', 'харьков', 'белгород', 'курск', 'брянск',
                    'крым', 'севастополь', 'донбасс', 'лднр',
                    # Результаты
                    'уничтож', 'подбит', 'ликвидир', 'занят', 'освобожд', 'взят',
                    'контратак', 'отбит', 'потер', 'жертв', 'раненых', 'погибш',
                    # Вооружение
                    'himars', 'leopard', 'abrams', 'challenger', 'iskander', 'kinzhal',
                    'patriot', 'iris-t', 'калибр', 'javelin', 'nlaw', 'пво', 'зенитн',
                    'с-300', 'с-400', 'шахед'
                ],
                'secondary': [
                    'military', 'war', 'battle', 'combat', 'strike', 'attack',
                    'вагнер', 'чвк', 'пмк', 'наемник', 'доброволец',
                    'мобилизац', 'призыв', 'контракт'
                ],
                'weight': 1.0
            },
            
            'humanitarian_crisis': {
                'primary': [
                    # Гуманитарная катастрофа
                    'гуманитар', 'беженц', 'эвакуац', 'помощ', 'гуманитарная',
                    'переселенц', 'вынужден', 'жител', 'населен', 'мирн',
                    # Инфраструктура
                    'разруш', 'руин', 'обломк', 'завал', 'повреж',
                    'без света', 'без воды', 'без тепла', 'без газа',
                    'электроснабж', 'водоснабж', 'теплоснабж', 'газоснабж',
                    # Медицина
                    'больниц', 'медиц', 'врач', 'лечен', 'ранен', 'постадав',
                    'скорая', 'госпитал', 'клиник', 'раненых', 'жертв', 'погибш',
                    'травм', 'увечья',
                    # Продовольствие
                    'голод', 'продовольств', 'питан', 'пища', 'еда',
                    'продукт', 'нехватка', 'дефицит',
                    # Жилье
                    'дом', 'жилье', 'квартир', 'здани', 'убежищ', 'укрыт',
                    'бомбоубежищ', 'подвал', 'метро',
                    # Дети и уязвимые группы
                    'дет', 'ребенок', 'школ', 'детсад', 'сирот',
                    'пенсионер', 'инвалид', 'престарел'
                ],
                'secondary': [
                    'humanitarian', 'refugee', 'crisis', 'evacuation',
                    'красный крест', 'оон', 'юнисеф', 'вкп оон'
                ],
                'weight': 0.9
            },
            
            'economic_consequences': {
                'primary': [
                    # Экономика
                    'экономи', 'санкц', 'эмбарго', 'ограничен', 'запрет',
                    'торговл', 'экспорт', 'импорт', 'поставк', 'контракт',
                    # Финансы
                    'финанс', 'банк', 'кредит', 'долг', 'валют', 'курс',
                    'рубль', 'доллар', 'евро', 'инфляц', 'цена', 'стоимост',
                    'бюджет', 'расход', 'доход', 'налог',
                    # Энергетика
                    'газ', 'нефт', 'энерг', 'электр', 'топлив',
                    'газопровод', 'нефтепровод', 'трубопровод',
                    'северный поток', 'nord stream', 'газпром', 'нафтогаз',
                    # Промышленность
                    'производств', 'завод', 'фабрик', 'предприят',
                    'промышленн', 'индустр',
                    # Транспорт и логистика
                    'транспорт', 'логистик', 'порт', 'аэропорт',
                    'железн', 'автомобил', 'авиа',
                    # Продовольствие и сельское хозяйство
                    'зерн', 'пшениц', 'урожай', 'сельск', 'агро',
                    'удобрен', 'посев', 'сбор'
                ],
                'secondary': [
                    'sanctions', 'economy', 'trade', 'finance', 'export',
                    'swift', 'цб', 'центробанк', 'цб рф',
                    'инвестиц', 'активы', 'заморожен'
                ],
                'weight': 0.85
            },
            
            'political_decisions': {
                'primary': [
                    # Политика и дипломатия
                    'политик', 'дипломат', 'переговор', 'встреч', 'саммит',
                    'договор', 'соглашен', 'пакт', 'резолюц', 'декларац',
                    # Международные организации
                    'оон', 'нато', 'ес', 'евросоюз', 'евр', 'g7', 'g20',
                    'обсе', 'пасе', 'совет европы',
                    # Лидеры и правительства
                    'президент', 'премьер', 'министр', 'канцлер', 'глав',
                    'правительств', 'кабинет', 'администрац', 'парламент',
                    'рада', 'дума', 'сенат', 'конгресс',
                    # Конкретные лидеры
                    'путин', 'зеленск', 'байден', 'biden', 'scholz', 'макрон',
                    'трамп', 'trump', 'johnson', 'сунак', 'мельони',
                    # Решения
                    'указ', 'закон', 'постановл', 'распоряж', 'приказ',
                    'решен', 'заявлен', 'позиц', 'позици', 'мнен',
                    'позици', 'заявл', 'объявил', 'сообщил',
                    # Военно-политические решения
                    'поставк', 'военная помощь', 'оружие', 'вооружен',
                    'военн', 'альянс', 'коалиц', 'союз'
                ],
                'secondary': [
                    'nato', 'eu', 'european union', 'united nations',
                    'referendum', 'референдум', 'выбор', 'голосован',
                    'протест', 'митинг', 'демонстрац'
                ],
                'weight': 0.8
            },
            
            'information_social': {
                'primary': [
                    # СМИ и информация
                    'сми', 'медиа', 'новост', 'информац', 'сообщен',
                    'пресс', 'журналист', 'репортер', 'телевиден',
                    'газет', 'издан', 'публикац', 'статья',
                    # Соцсети и интернет
                    'соцсет', 'facebook', 'twitter', 'instagram', 'telegram',
                    'youtube', 'тикток', 'tiktok', 'вконтакт', 'одноклассник',
                    'интернет', 'сайт', 'портал', 'платформ',
                    # Цензура и контроль
                    'цензур', 'блокиров', 'запрет', 'ограничен',
                    'цензур', 'фильтр', 'модерац',
                    # Пропаганда и фейки
                    'пропаганд', 'фейк', 'дезинформ', 'фальшив',
                    'ложь', 'манипуляц', 'искажен', 'проверка фактов',
                    # Общественное мнение
                    'опрос', 'рейтинг', 'социолог', 'исследован',
                    'мнен', 'настроен', 'отношен',
                    # Культура и образование
                    'культур', 'образован', 'школ', 'университет',
                    'музей', 'театр', 'кино', 'искусств',
                    # Технологии
                    'технолог', 'it', 'кибер', 'хакер', 'взлом',
                    'программ', 'софт', 'приложен'
                ],
                'secondary': [
                    'social media', 'information', 'propaganda', 'fake news',
                    'массмедиа', 'вещан', 'трансляц',
                    'дискурс', 'нарратив', 'повестк'
                ],
                'weight': 0.75
            }
        }
        
        # Минимальный порог релевантности для классификации
        # Теперь это абсолютное количество совпадений * веса
        # Минимум 2 primary keyword или 6 secondary = score 6.0
        self.min_confidence_threshold = 2.0
    
    def _normalize_text(self, text: str) -> str:
        """Нормализация текста для поиска ключевых слов"""
        if not text:
            return ""
        return text.lower()
    
    def _count_keyword_matches(self, text: str, keywords: List[str]) -> int:
        """Подсчет количества совпадений ключевых слов"""
        text_normalized = self._normalize_text(text)
        matches = 0
        
        for keyword in keywords:
            # Используем границы слов для точного поиска
            pattern = r'\b' + re.escape(keyword)
            if re.search(pattern, text_normalized):
                matches += 1
        
        return matches
    
    def classify(self, title: str, content: str) -> Tuple[str, float, Dict[str, float]]:
        """
        Классифицирует статью по одной из 5 категорий
        
        Args:
            title: Заголовок статьи
            content: Содержание статьи
            
        Returns:
            tuple: (category, confidence, all_scores)
                - category: Название категории
                - confidence: Уверенность в классификации (0-1)
                - all_scores: Словарь со всеми оценками
        """
        full_text = f"{title} {content}"
        
        category_scores = {}
        
        for category, data in self.category_keywords.items():
            # Подсчитываем совпадения по primary keywords
            primary_matches = self._count_keyword_matches(
                full_text, 
                data['primary']
            )
            
            # Подсчитываем совпадения по secondary keywords
            secondary_matches = self._count_keyword_matches(
                full_text,
                data.get('secondary', [])
            )
            
            # Вычисляем score на основе абсолютного количества совпадений
            # Primary keywords важнее в 3 раза
            primary_weight = 3.0
            secondary_weight = 1.0
            
            # Абсолютный счет с весами категории
            combined_score = (
                primary_matches * primary_weight + 
                secondary_matches * secondary_weight
            ) * data['weight']
            
            category_scores[category] = combined_score
        
        # Находим категорию с максимальным score
        best_category = max(category_scores, key=category_scores.get)
        confidence = category_scores[best_category]
        
        # Если confidence слишком низкий, возвращаем None
        if confidence < self.min_confidence_threshold:
            return None, confidence, category_scores
        
        return best_category, confidence, category_scores
    
    def get_category_keywords(self, category: str, count: int = 10) -> List[str]:
        """Возвращает топ N ключевых слов для категории"""
        if category not in self.category_keywords:
            return []
        
        return self.category_keywords[category]['primary'][:count]


# Создаем глобальный экземпляр
classifier = ImprovedNewsClassifier()


if __name__ == '__main__':
    # Тестирование классификатора
    test_articles = [
        {
            'title': 'ВСУ атаковали позиции российских войск в Донецке',
            'content': 'Украинская армия нанесла удар по военным объектам. Использовались ракеты HIMARS.'
        },
        {
            'title': 'Беженцы получили гуманитарную помощь',
            'content': 'Красный Крест доставил продовольствие и медикаменты для эвакуированных жителей.'
        },
        {
            'title': 'ЕС ввел новые санкции против России',
            'content': 'Европейский союз расширил список ограничений в сфере энергетики и финансов.'
        },
        {
            'title': 'Путин и Байден обсудили ситуацию на переговорах',
            'content': 'Президенты России и США провели встречу в рамках саммита.'
        },
        {
            'title': 'Telegram заблокировал несколько каналов за фейки',
            'content': 'Социальная сеть удалила контент с дезинформацией о военных действиях.'
        }
    ]
    
    classifier = ImprovedNewsClassifier()
    
    for article in test_articles:
        category, confidence, scores = classifier.classify(
            article['title'],
            article['content']
        )
        print(f"\nСтатья: {article['title']}")
        print(f"Категория: {category}")
        print(f"Уверенность: {confidence:.2f}")
        print(f"Все оценки: {scores}")
