#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –í–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
- –û—á–∏—Å—Ç–∫–∏ –æ—Ç —ç–º–æ–¥–∑–∏, —Å–ø–∞–º–∞ –∏ –ø—Ä–∏–∑—ã–≤–æ–≤ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É
"""

import re
import logging
from typing import Tuple, List, Optional

logger = logging.getLogger(__name__)

class ContentValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        # –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.bad_content_phrases = [
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å",
            "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "–∫–æ–Ω—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª",
            "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å",
            "—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞–º–∏",
            "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å",
            "—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏",
            "–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
            "—Ä–µ–ø–æ—Å—Ç–∏—Ç–µ",
            "–ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ",
            "—á–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ",
            "—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ",
            "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            "–ø–æ —Ç–µ–º–µ",
            "–ø–æ—Ö–æ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–¥—Ä—É–≥–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
            "–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–∞—Ä—Ö–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π",
            "–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞",
            "–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
            "–∑–∞–≥—Ä—É–∑–∫–∞",
            "loading",
            "please wait",
            "waiting",
            "–æ—à–∏–±–∫–∞",
            "error",
            "exception",
            "undefined",
            "null",
            "none"
        ]
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏
        self.emoji_patterns = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏ Unicode
            r'[\U0001F600-\U0001F64F]',  # Emoticons
            r'[\U0001F300-\U0001F5FF]',  # Misc Symbols and Pictographs
            r'[\U0001F680-\U0001F6FF]',  # Transport and Map
            r'[\U0001F1E0-\U0001F1FF]',  # Regional indicator symbols
            r'[\U00002600-\U000026FF]',  # Miscellaneous symbols
            r'[\U00002700-\U000027BF]',  # Dingbats
            r'[\U0001F900-\U0001F9FF]',  # Supplemental Symbols and Pictographs
            r'[\U0001FA70-\U0001FAFF]',  # Symbols and Pictographs Extended-A
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            r'[üî•‚ö°Ô∏èüí•üö®‚ö†Ô∏è‚ùóÔ∏è‚ùå‚úÖüëçüëéüíØüéØüì¢üì£üîî]',
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
            r'[‚Üí‚Üê‚Üë‚Üì‚Üó‚Üò]',
            r'[‚òÖ‚òÜ‚≠ê]',
            r'[üí¨üí≠üí°]'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã)
        self.link_patterns = [
            r'https?://[^\s]+',  # HTTP/HTTPS —Å—Å—ã–ª–∫–∏
            r'www\.[^\s]+',     # WWW —Å—Å—ã–ª–∫–∏
            r'[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:/[^\s]*)?'  # –û–±—â–∏–µ –¥–æ–º–µ–Ω—ã
        ]
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–Ω–µ —É–¥–∞–ª—è–µ–º)
        self.allowed_domains = [
            'ria.ru', 'lenta.ru', 'rbc.ru', 'gazeta.ru', 'kommersant.ru',
            'tsn.ua', 'unian.ua', 'rt.com', '7kanal.co.il', 'cnn.com',
            'aljazeera.com', 'reuters.com', 'france24.com', 'dw.com',
            'euronews.com', 'bbc.com', 'bbc.co.uk'
        ]
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.min_content_length = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.min_title_length = 10     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
    def validate_content(self, title: str, content: str) -> Tuple[bool, str, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            Tuple[bool, str, str]: (is_valid, cleaned_title, cleaned_content)
                - is_valid: True –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω
                - cleaned_title: –û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                - cleaned_content: –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not title or not content:
                logger.warning("–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç")
                return False, "", ""
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            cleaned_title = self._clean_text(title)
            cleaned_content = self._clean_text(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(cleaned_title) < self.min_title_length:
                logger.warning(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(cleaned_title)} —Å–∏–º–≤–æ–ª–æ–≤")
                return False, cleaned_title, cleaned_content
                
            if len(cleaned_content) < self.min_content_length:
                logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(cleaned_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                return False, cleaned_title, cleaned_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–æ—Ö–∏–µ —Ñ—Ä–∞–∑—ã
            full_text = f"{cleaned_title} {cleaned_content}".lower()
            for phrase in self.bad_content_phrases:
                if phrase.lower() in full_text:
                    logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ –ø–ª–æ—Ö–∞—è —Ñ—Ä–∞–∑–∞: '{phrase}'")
                    return False, cleaned_title, cleaned_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
            emoji_count = self._count_emojis(full_text)
            if emoji_count > 3:  # –ú–∞–∫—Å–∏–º—É–º 3 —ç–º–æ–¥–∑–∏
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏: {emoji_count}")
                return False, cleaned_title, cleaned_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã)
            if self._is_spam(cleaned_content):
                logger.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∞–º")
                return False, cleaned_title, cleaned_content
            
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω: {len(cleaned_title)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, {len(cleaned_content)} –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
            return True, cleaned_title, cleaned_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return False, title, content
    
    def _clean_text(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏, –ª–∏—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        cleaned = text
        
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        for pattern in self.emoji_patterns:
            cleaned = re.sub(pattern, '', cleaned, flags=re.UNICODE)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤)
        cleaned = self._remove_unwanted_links(cleaned)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned = re.sub(r'\s+', ' ', cleaned)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
        cleaned = re.sub(r'\n+', '\n', cleaned)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –æ–¥–∏–Ω
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        cleaned = re.sub(r'<[^>]+>', '', cleaned)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        cleaned = re.sub(r'[!]{2,}', '!', cleaned)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        cleaned = re.sub(r'[?]{2,}', '?', cleaned)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        cleaned = re.sub(r'[.]{3,}', '...', cleaned)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned = re.sub(r'[_\*#]+', '', cleaned)  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏
        
        return cleaned.strip()
    
    def _remove_unwanted_links(self, text: str) -> str:
        """
        –£–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –¢–µ–∫—Å—Ç –±–µ–∑ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        """
        cleaned = text
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        for pattern in self.link_patterns:
            links = re.findall(pattern, cleaned)
            for link in links:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
                is_allowed = any(domain in link.lower() for domain in self.allowed_domains)
                if not is_allowed:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                    cleaned = cleaned.replace(link, '')
        
        return cleaned
    
    def _count_emojis(self, text: str) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
        """
        count = 0
        for pattern in self.emoji_patterns:
            matches = re.findall(pattern, text, flags=re.UNICODE)
            count += len(matches)
        return count
    
    def _is_spam(self, content: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–∞–º–æ–º
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∞–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
        words = content.lower().split()
        if len(words) < 10:
            return False
        
        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤
        for i in range(len(words) - 5):
            phrase = ' '.join(words[i:i+5])
            if content.lower().count(phrase) > 2:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        upper_ratio = sum(1 for c in content if c.isupper()) / len(content) if content else 0
        if upper_ratio > 0.3:  # –ë–æ–ª–µ–µ 30% –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        exclamation_ratio = content.count('!') / len(content) if content else 0
        if exclamation_ratio > 0.05:  # –ë–æ–ª–µ–µ 5% –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            return True
        
        return False
    
    def get_validation_stats(self, title: str, content: str) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            content: –ö–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        stats = {
            'title_length': len(title) if title else 0,
            'content_length': len(content) if content else 0,
            'emoji_count': self._count_emojis(f"{title} {content}"),
            'has_bad_phrases': False,
            'is_spam': False,
            'upper_ratio': 0.0,
            'exclamation_ratio': 0.0
        }
        
        if content:
            full_text = f"{title} {content}".lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—Ö–∏–µ —Ñ—Ä–∞–∑—ã
            for phrase in self.bad_content_phrases:
                if phrase.lower() in full_text:
                    stats['has_bad_phrases'] = True
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º
            stats['is_spam'] = self._is_spam(content)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            stats['upper_ratio'] = sum(1 for c in content if c.isupper()) / len(content)
            stats['exclamation_ratio'] = content.count('!') / len(content)
        
        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
content_validator = ContentValidator()


def validate_news_content(title: str, content: str) -> Tuple[bool, str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        Tuple[bool, str, str]: (is_valid, cleaned_title, cleaned_content)
    """
    return content_validator.validate_content(title, content)


def get_content_stats(title: str, content: str) -> dict:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        content: –ö–æ–Ω—Ç–µ–Ω—Ç
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    return content_validator.get_validation_stats(title, content)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    test_cases = [
        ("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", "–≠—Ç–æ –æ–±—ã—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ –ø—Ä–æ–±–ª–µ–º. –°–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏."),
        ("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
        ("üî• –°–†–û–ß–ù–û! ‚ö°Ô∏è", "–í–ê–ñ–ù–ê–Ø –ù–û–í–û–°–¢–¨!!! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!"),
        ("–ö–æ—Ä–æ—Ç–∫–∞—è", "–ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞"),
        ("–°–ø–∞–º –Ω–æ–≤–æ—Å—Ç—å", "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ñ—Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ñ—Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ñ—Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ñ—Ä–∞–∑–∞")
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ContentValidator:")
    print("=" * 50)
    
    for title, content in test_cases:
        is_valid, clean_title, clean_content = validate_news_content(title, content)
        stats = get_content_stats(title, content)
        
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content}")
        print(f"–í–∞–ª–∏–¥–µ–Ω: {is_valid}")
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {clean_title}")
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {clean_content}")
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        print("-" * 30)
