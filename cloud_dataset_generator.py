#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ChatML –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Cloud.ru Foundation Models API
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º —Ñ–∞–∫—Ç–∞–º
"""

import json
import os
import re
import random
from datetime import datetime
from typing import List, Dict, Any, Optional
import requests
import urllib3
from config import Config

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CloudDatasetGenerator:
    def __init__(self):
        self.config = Config()
        self.api_key = os.getenv('API_KEY')  # Cloud.ru API –∫–ª—é—á
        self.api_url = "https://foundation-models.api.cloud.ru/v1"  # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Cloud.ru API
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        self.min_text_length = 100
        self.max_text_length = 5000
        self.spam_keywords = [
            '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '–ª–∞–π–∫', '—Ä–µ–ø–æ—Å—Ç', '–∫–∞–Ω–∞–ª', '—Ç–µ–ª–µ–≥—Ä–∞–º',
            '—Ä–µ–∫–ª–∞–º–∞', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–ø—Ä–æ–º–æ–∫–æ–¥', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
            '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '—Ñ–æ—Ä–µ–∫—Å'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_keywords = [
            '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–æ–æ–±—â–∞–µ—Ç', '–∑–∞—è–≤–∏–ª', '–æ–±—ä—è–≤–∏–ª', '–ø—Ä–æ–∏–∑–æ—à–ª–æ',
            '—Å–ª—É—á–∏–ª–æ—Å—å', '—Å–æ–±—ã—Ç–∏–µ', '–∏–Ω—Ü–∏–¥–µ–Ω—Ç', '—Å–∏—Ç—É–∞—Ü–∏—è', '—Ñ–∞–∫—Ç',
            '–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–∏—Å—Ç–æ—á–Ω–∏–∫', '—ç–∫—Å–ø–µ—Ä—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫',
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–æ—Ç—á–µ—Ç', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'darpa', 'cia',
            '–ø–µ–Ω—Ç–∞–≥–æ–Ω', '–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç'
        ]
        
    def generate_question_with_cloud_api(self, news_text: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è Cloud.ru Foundation Models API
        """
        if not self.api_key:
            print("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
            return self._get_fallback_question()
            
        try:
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Cloud.ru API...")
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                "model": "Qwen/Qwen3-Coder-480B-A35B-Instruct",
                "max_tokens": 100,
                "temperature": 0.7,
                "presence_penalty": 0,
                "top_p": 0.95,
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–∞–º. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ª–æ–≥–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        "role": "user",
                        "content": f"–°–æ–∑–¥–∞–π –æ–¥–∏–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–Ω—è—Ç—å —Å—É—Ç—å —Å–æ–±—ã—Ç–∏—è. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–ß—Ç–æ, –ö–∞–∫, –ì–¥–µ, –ö–æ–≥–¥–∞, –ü–æ—á–µ–º—É, –ö—Ç–æ).\n\n–ù–æ–≤–æ—Å—Ç—å: {news_text[:1000]}\n\n–í–æ–ø—Ä–æ—Å:"
                    }
                ]
            }
            
            print(f"üì° –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ {self.api_url}/chat/completions")
            print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏: {len(news_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            response = requests.post(
                f"{self.api_url}/chat/completions",
                headers=headers,
                json=data,
                timeout=30,
                verify=False
            )
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                question = result['choices'][0]['message']['content'].strip()
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {question[:50]}...")
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {response.text}")
                print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
                return self._get_fallback_question()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            question = re.sub(r'^["\']|["\']$', '', question)
            question = question.strip()
            
            if question and len(question) > 10:
                print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question}")
                return question
            else:
                print(f"‚ö†Ô∏è  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Cloud.ru API: {e}")
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
            
        return self._get_fallback_question()
    
    def _get_fallback_question(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        """
        import random
        
        fallback_questions = [
            "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏?",
            "–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?",
            "–ß—Ç–æ —Å—Ç–∞–ª–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?",
            "–ö–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –Ω–æ–≤–æ—Å—Ç–∏?",
            "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ –¥–∞–Ω–Ω—ã–º —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è?",
            "–ö–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ?",
            "–û —á–µ–º —Å–æ–æ–±—â–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏?",
            "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?"
        ]
        
        return random.choice(fallback_questions)
    
    def is_valid_news_item(self, item: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        """
        if not isinstance(item, dict):
            return False
        
        text = item.get('text', '')
        if not text or len(text.strip()) < 50:
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        service_keywords = ['–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '–∫–∞–Ω–∞–ª', '—Ä–µ–∫–ª–∞–º–∞', '—Å–ø–æ–Ω—Å–æ—Ä']
        text_lower = text.lower()
        if any(keyword in text_lower for keyword in service_keywords):
            return False
        
        return True
    
    def is_valid_telegram_message(self, message: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not isinstance(message, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.get('type') != 'message':
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        text = self.extract_telegram_text(message)
        if not text or len(text.strip()) < 100:
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        service_keywords = ['–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '@', '–∫–∞–Ω–∞–ª', '—Ä–µ–∫–ª–∞–º–∞', '—Å–ø–æ–Ω—Å–æ—Ä', '—Ä–µ–ø–æ—Å—Ç']
        text_lower = text.lower()
        if any(keyword in text_lower for keyword in service_keywords):
            return False
        
        return True
    
    def extract_telegram_text(self, message: Dict) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        text_parts = message.get('text', [])
        if isinstance(text_parts, str):
            return text_parts
        
        if isinstance(text_parts, list):
            full_text = ""
            for part in text_parts:
                if isinstance(part, str):
                    full_text += part
                elif isinstance(part, dict) and 'text' in part:
                    full_text += part['text']
            return full_text
        
        return ""
    
    def create_chatml_entry_from_telegram(self, message: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç ChatML –∑–∞–ø–∏—Å—å –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        text = self.extract_telegram_text(message)
        if not text:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        news_item = {
            'text': text,
            'date': message.get('date', ''),
            'source': 'telegram',
            'id': message.get('id', '')
        }
        
        return self.create_chatml_entry(news_item)
    
    def is_quality_message(self, message_data: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
        """
        text = self.extract_text_from_message(message_data)
        
        if not text or len(text) < self.min_text_length:
            return False
            
        if len(text) > self.max_text_length:
            return False
            
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        spam_count = sum(1 for keyword in self.spam_keywords if keyword in text_lower)
        if spam_count >= 2:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        news_count = sum(1 for keyword in self.news_keywords if keyword in text_lower)
        if news_count == 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        link_count = len(re.findall(r'http[s]?://\S+', text))
        if link_count > 3:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–ø—Ä–∏–∑–Ω–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        punctuation_count = len(re.findall(r'[.!?;:]', text))
        if punctuation_count < 2:
            return False
            
        return True
    
    def extract_text_from_message(self, message_data: Dict[str, Any]) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        """
        text_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'text' in message_data:
            if isinstance(message_data['text'], str):
                text_parts.append(message_data['text'])
            elif isinstance(message_data['text'], list):
                for item in message_data['text']:
                    if isinstance(item, str):
                        text_parts.append(item)
                    elif isinstance(item, dict) and 'text' in item:
                        text_parts.append(item['text'])
        
        # –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
        if 'caption' in message_data:
            if isinstance(message_data['caption'], str):
                text_parts.append(message_data['caption'])
            elif isinstance(message_data['caption'], list):
                for item in message_data['caption']:
                    if isinstance(item, str):
                        text_parts.append(item)
                    elif isinstance(item, dict) and 'text' in item:
                        text_parts.append(item['text'])
        
        return ' '.join(text_parts).strip()
    
    def create_chatml_entry(self, message_data: Dict[str, Any], use_ai: bool = True) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChatML
        """
        text = self.extract_text_from_message(message_data)
        
        if use_ai:
            question = self.generate_question_with_cloud_api(text)
        else:
            question = self._get_fallback_question()
        
        return {
            "messages": [
                {
                    "role": "user",
                    "content": question
                },
                {
                    "role": "assistant",
                    "content": text
                }
            ]
        }
    
    def process_json_file(self, file_path: str, use_ai: bool = True) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ChatML –∑–∞–ø–∏—Å–µ–π
        """
        chatml_entries = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            messages = []
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç Telegram –∫–∞–Ω–∞–ª–∞
            if isinstance(data, dict) and 'messages' in data:
                print(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Telegram –∫–∞–Ω–∞–ª: {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
                messages = data['messages']
                print(f"üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            elif isinstance(data, list):
                messages = data
            
            for message in messages:
                if isinstance(message, dict) and self.is_quality_message(message):
                    entry = self.create_chatml_entry(message, use_ai)
                    chatml_entries.append(entry)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return chatml_entries
    
    def generate_dataset(self, input_dir: str = "dataset/input", output_dir: str = "dataset/output", use_ai: bool = True):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤
        """
        if not os.path.exists(input_dir):
            print(f"–ü–∞–ø–∫–∞ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        all_entries = []
        json_files = [f for f in os.listdir(input_dir) if f.endswith('.json')]
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤")
        
        try:
            for i, filename in enumerate(json_files, 1):
                file_path = os.path.join(input_dir, filename)
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(json_files)}: {filename}")
                
                entries = self.process_json_file(file_path, use_ai)
                all_entries.extend(entries)
                
                print(f"  –°–æ–∑–¥–∞–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                if i % 10 == 0 or i == len(json_files):
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    ai_suffix = "_cloud_ai" if use_ai else "_templates"
                    temp_filename = f"chatml_dataset{ai_suffix}_temp_{i}files_{timestamp}.json"
                    temp_path = os.path.join(output_dir, temp_filename)
                    
                    with open(temp_path, 'w', encoding='utf-8') as f:
                        json.dump(all_entries, f, ensure_ascii=False, indent=2)
                    
                    print(f"  üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {temp_filename} ({len(all_entries)} –∑–∞–ø–∏—Å–µ–π)")
        
        except KeyboardInterrupt:
            print(f"\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(json_files)}")
            print(f"üìù –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_entries)}")
            
            if all_entries:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                ai_suffix = "_cloud_ai" if use_ai else "_templates"
                partial_filename = f"chatml_dataset{ai_suffix}_partial_{i}files_{timestamp}.json"
                partial_path = os.path.join(output_dir, partial_filename)
                
                with open(partial_path, 'w', encoding='utf-8') as f:
                    json.dump(all_entries, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –ß–∞—Å—Ç–∏—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {partial_filename}")
                return partial_path
            
            return None
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        ai_suffix = "_cloud_ai" if use_ai else "_templates"
        output_filename = f"chatml_dataset{ai_suffix}_{timestamp}.json"
        output_path = os.path.join(output_dir, output_filename)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(all_entries, f, ensure_ascii=False, indent=2)
        
        print(f"\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        print(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(all_entries)} ChatML –∑–∞–ø–∏—Å–µ–π")
        
        return output_path

def main():
    generator = CloudDatasetGenerator()
    
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ChatML –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Cloud.ru Foundation Models API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    if not generator.api_key:
        print("‚ö†Ô∏è  API –∫–ª—é—á Cloud.ru –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        use_ai = False
    else:
        print("‚úÖ API –∫–ª—é—á Cloud.ru –Ω–∞–π–¥–µ–Ω")
        use_ai = True
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
    output_path = generator.generate_dataset(use_ai=use_ai)
    
    if output_path:
        print(f"\n‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")

if __name__ == "__main__":
    main()