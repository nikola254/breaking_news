#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import sys
import os
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    
    try:
        from parsers.improved_classifier import ImprovedNewsClassifier
        
        classifier = ImprovedNewsClassifier()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        test_news = [
            {
                'title': '–í–° –†–§ –Ω–∞–Ω–µ—Å–ª–∏ –º–æ—â–Ω—ã–π —É–¥–∞—Ä –ø–æ –≤–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º –£–∫—Ä–∞–∏–Ω—ã',
                'content': '–†–æ—Å—Å–∏–π—Å–∫–∏–µ –≤–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ–ª–∏ —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—é –≤–æ–µ–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
                'expected': 'military_operations'
            },
            {
                'title': '–≠–≤–∞–∫—É–∞—Ü–∏—è –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –∏–∑ –∑–æ–Ω—ã –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π',
                'content': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
                'expected': 'humanitarian_crisis'
            },
            {
                'title': '–°–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –†–æ—Å—Å–∏–∏ —É–¥–∞—Ä–∏–ª–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ',
                'content': '–ó–∞–ø–∞–¥–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤–µ–ª–∏ –∫ —Ä–æ—Å—Ç—É —Ü–µ–Ω –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏',
                'expected': 'economic_consequences'
            },
            {
                'title': '–ü—É—Ç–∏–Ω –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å –ª–∏–¥–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω –°–ù–ì',
                'content': '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–æ—Å—Å–∏–∏ –æ–±—Å—É–¥–∏–ª –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏',
                'expected': 'political_decisions'
            },
            {
                'title': '–ù–æ–≤—ã–π —Ñ–∏–ª—å–º –æ –≤–æ–π–Ω–µ –≤ –£–∫—Ä–∞–∏–Ω–µ',
                'content': '–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç—ã —Å–Ω–∏–º–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –æ —Å–æ–±—ã—Ç–∏—è—Ö',
                'expected': 'information_social'
            }
        ]
        
        correct = 0
        total = len(test_news)
        
        for i, news in enumerate(test_news, 1):
            category, confidence, scores = classifier.classify(news['title'], news['content'])
            expected = news['expected']
            
            print(f"  –¢–µ—Å—Ç {i}: {news['title'][:50]}...")
            print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"    –ü–æ–ª—É—á–µ–Ω–æ: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            
            if category == expected:
                correct += 1
                print("    ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û")
            else:
                print("    ‚ùå –û–®–ò–ë–ö–ê")
            print()
        
        accuracy = (correct / total) * 100
        print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {accuracy:.1f}% ({correct}/{total})")
        
        return accuracy > 60  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        traceback.print_exc()
        return False

def test_parser_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    
    parsers = [
        'parser_ria', 'parser_lenta', 'parser_rbc', 'parser_gazeta',
        'parser_kommersant', 'parser_cnn', 'parser_bbc', 'parser_dw',
        'parser_euronews', 'parser_france24', 'parser_reuters', 'parser_rt',
        'parser_telegram', 'parser_twitter', 'parser_unian', 'parser_tsn',
        'parser_aljazeera', 'parser_israil'
    ]
    
    working_parsers = []
    broken_parsers = []
    
    for parser_name in parsers:
        try:
            module = __import__(f'parsers.{parser_name}', fromlist=[parser_name])
            working_parsers.append(parser_name)
            print(f"  ‚úÖ {parser_name}")
        except Exception as e:
            broken_parsers.append((parser_name, str(e)))
            print(f"  ‚ùå {parser_name}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:")
    print(f"  –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(working_parsers)}")
    print(f"  –°–ª–æ–º–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(broken_parsers)}")
    
    if broken_parsers:
        print("\nüîß –°–ª–æ–º–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:")
        for parser, error in broken_parsers:
            print(f"  - {parser}: {error}")
    
    return len(broken_parsers) == 0

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse...")
    
    try:
        from clickhouse_driver import Client
        from config import Config
        
        client = Client(
            host=Config.CLICKHOUSE_HOST,
            port=Config.CLICKHOUSE_NATIVE_PORT,
            user=Config.CLICKHOUSE_USER,
            password=Config.CLICKHOUSE_PASSWORD
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = client.execute('SELECT 1')
        print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        databases = client.execute('SHOW DATABASES')
        db_names = [row[0] for row in databases]
        
        if 'news' in db_names:
            print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'news' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("  ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'news' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
        return False

def test_table_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π"""
    print("üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
    
    try:
        from clickhouse_driver import Client
        from config import Config
        
        client = Client(
            host=Config.CLICKHOUSE_HOST,
            port=Config.CLICKHOUSE_NATIVE_PORT,
            user=Config.CLICKHOUSE_USER,
            password=Config.CLICKHOUSE_PASSWORD
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        test_table_sql = """
        CREATE TABLE IF NOT EXISTS news.test_table (
            id UUID DEFAULT generateUUIDv4(),
            title String,
            content String,
            published_date DateTime DEFAULT now()
        ) ENGINE = MergeTree()
        ORDER BY (published_date, id)
        """
        
        client.execute(test_table_sql)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        client.execute('DROP TABLE IF EXISTS news.test_table')
        print("  ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def test_news_preprocessing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        from parsers.news_preprocessor import NewsPreprocessor
        
        preprocessor = NewsPreprocessor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = """
        ‚ùóÔ∏è‚ö°üî• –í–ê–ñ–ù–û! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!
        
        –í–° –†–§ –Ω–∞–Ω–µ—Å–ª–∏ –º–æ—â–Ω—ã–π —É–¥–∞—Ä –ø–æ –≤–æ–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º.
        
        https://example.com/news/123
        
        –ß–∏—Ç–∞–π—Ç–µ –Ω–∞—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!
        """
        
        cleaned = preprocessor.clean_text(test_text)
        
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text[:100]}...")
        print(f"  –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞
        if '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è' not in cleaned.lower() and 'https://' not in cleaned:
            print("  ‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("  ‚ùå –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤")
    print("=" * 60)
    
    tests = [
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π", test_classifier),
        ("–ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤", test_parser_imports),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", test_table_creation),
        ("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", test_news_preprocessing),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
