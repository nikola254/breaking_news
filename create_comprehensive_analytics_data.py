#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
"""

import sys
import os
from datetime import datetime, timedelta
import random
import json
from clickhouse_driver import Client

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config

def create_comprehensive_analytics():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
    client = Client(
        host=Config.CLICKHOUSE_HOST,
        port=Config.CLICKHOUSE_NATIVE_PORT,
        user=Config.CLICKHOUSE_USER,
        password=Config.CLICKHOUSE_PASSWORD,
        database=Config.CLICKHOUSE_DATABASE
    )
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        client.execute("DELETE FROM ukraine_headlines WHERE id LIKE 'test_comprehensive_%'")
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    create_news_data(client)
    
    print("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def create_news_data(client):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üì∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    categories = [
        'test_military', 'test_diplomatic', 'test_economic', 'test_humanitarian', 'test_information',
        'test_political', 'test_social', 'test_international', 'test_security', 'test_technology'
    ]
    
    sources = [
        'test_bbc', 'test_cnn', 'test_reuters', 'test_ap', 'test_guardian',
        'test_france24', 'test_dw', 'test_euronews', 'test_aljazeera', 'test_rt'
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    base_date = datetime.now() - timedelta(days=30)
    
    news_data = []
    for i in range(500):  # 500 –Ω–æ–≤–æ—Å—Ç–µ–π
        date = base_date + timedelta(
            days=random.randint(0, 30),
            hours=random.randint(0, 23),
            minutes=random.randint(0, 59)
        )
        
        category = random.choice(categories)
        source = random.choice(sources)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        sentiment_score = round(random.uniform(0.0, 1.0), 3)
        tension_score = round(random.uniform(0.0, 1.0), 3)
        conflict_level = round(random.uniform(0.0, 1.0), 3)
        urgency_factor = round(random.uniform(0.0, 1.0), 3)
        emotional_intensity = round(random.uniform(0.0, 1.0), 3)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if tension_score >= 0.8:
            tension_category = 'critical'
        elif tension_score >= 0.6:
            tension_category = 'high'
        elif tension_score >= 0.4:
            tension_category = 'medium'
        elif tension_score >= 0.2:
            tension_category = 'low'
        else:
            tension_category = 'minimal'
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        titles = {
            'test_military': [
                '–í–æ–µ–Ω–Ω—ã–µ —É—á–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ',
                '–ü–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
                '–ê–Ω–∞–ª–∏–∑ –≤–æ–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏',
                '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
            ],
            'test_diplomatic': [
                '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
                '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è',
                '–í–∏–∑–∏—Ç –¥–µ–ª–µ–≥–∞—Ü–∏–∏',
                '–ú–∏—Ä–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã'
            ],
            'test_economic': [
                '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏',
                '–¢–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å',
                '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å'
            ],
            'test_humanitarian': [
                '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å',
                '–ë–µ–∂–µ–Ω—Ü—ã –∏ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω—Ü—ã',
                '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
            ],
            'test_information': [
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–π–Ω–∞',
                '–ö–∏–±–µ—Ä–∞—Ç–∞–∫–∏',
                '–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –≤ –°–ú–ò',
                '–î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
            ]
        }
        
        title = random.choice(titles.get(category, ['–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏']))
        content = f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ {title.lower()}. " * 5
        
        news_data.append([
            f"test_comprehensive_{i}",  # id (String)
            title,  # title
            content,  # content
            f'https://test-source.com/news/{i}',  # url
            source,  # source
            f'test_author_{i % 10}',  # author
            date,  # date
            category,  # category
            sentiment_score,  # sentiment_score
            tension_score,  # tension_score
            conflict_level,  # conflict_level
            urgency_factor,  # urgency_factor
            emotional_intensity,  # emotional_intensity
            tension_category,  # tension_category
            datetime.now()  # created_at
        ])
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    client.execute("""
        INSERT INTO ukraine_headlines 
        (id, title, content, url, source, author, date, category, 
         sentiment_score, tension_score, conflict_level, urgency_factor, 
         emotional_intensity, tension_category, created_at)
        VALUES
    """, news_data)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

def create_social_media_data(client):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    print("üì± –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π...")
    
    platforms = ['test_telegram', 'test_twitter', 'test_vk', 'test_ok']
    risk_levels = ['low', 'medium', 'high', 'critical']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    base_date = datetime.now() - timedelta(days=7)
    
    social_data = []
    for i in range(200):  # 200 –ø–æ—Å—Ç–æ–≤
        date = base_date + timedelta(
            days=random.randint(0, 7),
            hours=random.randint(0, 23),
            minutes=random.randint(0, 59)
        )
        
        platform = random.choice(platforms)
        risk_level = random.choice(risk_levels)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞
        if risk_level == 'low':
            extremism_percentage = round(random.uniform(0, 25), 1)
        elif risk_level == 'medium':
            extremism_percentage = round(random.uniform(25, 50), 1)
        elif risk_level == 'high':
            extremism_percentage = round(random.uniform(50, 75), 1)
        else:  # critical
            extremism_percentage = round(random.uniform(75, 100), 1)
        
        keywords_matched = random.randint(1, 10)
        
        social_data.append([
            i + 1,  # id
            platform,
            f'test_user_{i}',  # author_name
            f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç #{i} —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',  # text
            date,
            extremism_percentage,
            risk_level,
            keywords_matched
        ])
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É
    client.execute("""
        INSERT INTO social_media.all_posts 
        (id, platform, author_name, text, created_at, extremism_percentage, risk_level, keywords_matched)
        VALUES
    """, social_data)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    create_platform_specific_data(client)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(social_data)} –∑–∞–ø–∏—Å–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π")

def create_platform_specific_data(client):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    
    # Telegram –¥–∞–Ω–Ω—ã–µ
    telegram_data = []
    for i in range(50):
        date = datetime.now() - timedelta(days=random.randint(0, 7))
        telegram_data.append([
            i + 1,
            f'test_channel_{i}',
            f'test_user_{i}',
            f'Telegram –ø–æ—Å—Ç #{i}',
            date,
            random.randint(10, 1000),  # views
            random.randint(0, 50),     # forwards
            round(random.uniform(0, 100), 1),  # extremism_percentage
            random.choice(['low', 'medium', 'high', 'critical']),
            random.randint(1, 5)
        ])
    
    client.execute("""
        INSERT INTO social_media.telegram_posts 
        (id, channel_name, author_name, text, created_at, views, forwards, extremism_percentage, risk_level, keywords_matched)
        VALUES
    """, telegram_data)
    
    # Twitter –¥–∞–Ω–Ω—ã–µ
    twitter_data = []
    for i in range(50):
        date = datetime.now() - timedelta(days=random.randint(0, 7))
        twitter_data.append([
            i + 1,
            f'test_user_{i}',
            f'Twitter –ø–æ—Å—Ç #{i}',
            date,
            random.randint(0, 100),    # retweets
            random.randint(0, 200),    # likes
            round(random.uniform(0, 100), 1),  # extremism_percentage
            random.choice(['low', 'medium', 'high', 'critical']),
            random.randint(1, 5)
        ])
    
    client.execute("""
        INSERT INTO social_media.twitter_posts 
        (id, author_name, text, created_at, retweets, likes, extremism_percentage, risk_level, keywords_matched)
        VALUES
    """, twitter_data)
    
    # VK –¥–∞–Ω–Ω—ã–µ
    vk_data = []
    for i in range(50):
        date = datetime.now() - timedelta(days=random.randint(0, 7))
        vk_data.append([
            i + 1,
            f'test_user_{i}',
            f'VK –ø–æ—Å—Ç #{i}',
            date,
            random.randint(0, 50),     # likes
            random.randint(0, 20),     # reposts
            round(random.uniform(0, 100), 1),  # extremism_percentage
            random.choice(['low', 'medium', 'high', 'critical']),
            random.randint(1, 5)
        ])
    
    client.execute("""
        INSERT INTO social_media.vk_posts 
        (id, author_name, text, created_at, likes, reposts, extremism_percentage, risk_level, keywords_matched)
        VALUES
    """, vk_data)

def create_analytics_summary(client):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        client.execute("""
            CREATE TABLE IF NOT EXISTS analytics.daily_summary (
                date Date,
                total_news Int32,
                total_social_posts Int32,
                avg_sentiment Float32,
                high_risk_posts Int32,
                top_category String,
                tension_level String,
                created_at DateTime DEFAULT now()
            ) ENGINE = MergeTree()
            ORDER BY date
        """)
    except:
        pass
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    summary_data = []
    base_date = datetime.now() - timedelta(days=30)
    
    for i in range(30):
        date = (base_date + timedelta(days=i)).date()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_news = random.randint(10, 50)
        total_social_posts = random.randint(20, 100)
        avg_sentiment = round(random.uniform(-0.5, 0.5), 3)
        high_risk_posts = random.randint(0, 10)
        top_category = random.choice(['military', 'diplomatic', 'economic', 'humanitarian', 'information'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if high_risk_posts <= 2:
            tension_level = 'low'
        elif high_risk_posts <= 5:
            tension_level = 'medium'
        elif high_risk_posts <= 8:
            tension_level = 'high'
        else:
            tension_level = 'critical'
        
        summary_data.append([
            date,
            total_news,
            total_social_posts,
            avg_sentiment,
            high_risk_posts,
            top_category,
            tension_level,
            datetime.now()
        ])
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    try:
        client.execute("DELETE FROM analytics.daily_summary WHERE date >= today() - 30")
        client.execute("""
            INSERT INTO analytics.daily_summary 
            (date, total_news, total_social_posts, avg_sentiment, high_risk_posts, top_category, tension_level, created_at)
            VALUES
        """, summary_data)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(summary_data)} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫: {e}")

if __name__ == "__main__":
    create_comprehensive_analytics()