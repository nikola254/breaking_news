#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from app.ai.content_classifier import ExtremistContentClassifier

def final_test():
    classifier = ExtremistContentClassifier()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã - –æ–±—ã—á–Ω—ã–µ –∏ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ
    test_texts = [
        # –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        ("–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏", "normal"),
        ("–ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã", "normal"),
        ("–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", "normal"),
        ("–ò–∑—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "normal"),
        
        # –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        ("–¢–µ—Ä—Ä–æ—Ä–∏–∑–º –æ–ø—Ä–∞–≤–¥–∞–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏", "extremist"),
        ("–ü—Ä–∏–∑—ã–≤ –∫ –Ω–∞—Å–∏–ª–∏—é –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤", "extremist"),
        ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ä–∞–∫—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å –≤—á–µ—Ä–∞", "extremist"),
        ("–†–∞—Å–æ–≤–∞—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ü–≤–µ—Ç–∞—Ç—å", "extremist"),
        ("–°–≤–µ—Ä–∂–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏ –Ω–µ–∏–∑–±–µ–∂–Ω–æ", "extremist")
    ]
    
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê ===\n")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫-—Å–∫–æ—Ä–æ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n")
    
    correct_classifications = 0
    total_tests = len(test_texts)
    
    for i, (text, expected) in enumerate(test_texts, 1):
        print(f"–¢–µ—Å—Ç {i}: {text}")
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {expected}")
        print("-" * 60)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º rule-based –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
        rule_result = classifier.analyze_text_rule_based(text)
        risk_score = rule_result.get('risk_score', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        if risk_score >= 2:
            actual_classification = "extremist"
        else:
            actual_classification = "normal"
        
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {actual_classification}")
        print(f"–†–∏—Å–∫-—Å–∫–æ—Ä: {risk_score:.2f}")
        
        if rule_result.get('found_keywords'):
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {rule_result['found_keywords']}")
        
        if rule_result.get('risk_factors'):
            print(f"–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {rule_result['risk_factors']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if actual_classification == expected:
            print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û")
            correct_classifications += 1
        else:
            print("‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û")
        
        print("\n" + "="*70 + "\n")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (correct_classifications / total_tests) * 100
    print(f"–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {correct_classifications}/{total_tests}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    if accuracy >= 90:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif accuracy >= 70:
        print("‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
    else:
        print("‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

if __name__ == "__main__":
    final_test()