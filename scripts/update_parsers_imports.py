#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
"""

import os
import re
import glob

def update_parser_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        replacements = [
            # –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            (r'from ai_news_classifier import classify_news_ai', 'from parsers.gen_api_classifier import GenApiNewsClassifier'),
            (r'import ai_news_classifier', 'from parsers.gen_api_classifier import GenApiNewsClassifier'),
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            (r'classify_news_ai\(([^)]+)\)', r'GenApiNewsClassifier().classify(\1)'),
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            (r'(\s+)(\w+)\s*=\s*classify_news\([^)]+\)', r'\1classification_result = GenApiNewsClassifier().classify(title, content)\n\1category = classification_result["category_name"]\n\1confidence = classification_result["confidence"]\n\1social_tension_index = classification_result["social_tension_index"]\n\1spike_index = classification_result["spike_index"]'),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def update_all_parsers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–ê–†–°–ï–†–û–í")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–æ–≤
    parser_files = glob.glob("parsers/parser_*.py")
    
    updated_count = 0
    total_count = len(parser_files)
    
    for file_path in parser_files:
        if update_parser_file(file_path):
            updated_count += 1
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_count - updated_count}")

if __name__ == "__main__":
    update_all_parsers()
