#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from parsers.gen_api_classifier import GenApiNewsClassifier

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_gen_api_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get('GEN_API_KEY')
    
    if not api_key:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á gen-api.ru –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–∞–π–ª–µ .env:")
        logger.info("GEN_API_KEY=sk-fFv5kuV9ZZg4wNJuOY1RUGYv5KIf3dMkUeR27VclgRTprL1A04ucEN8lFwzr")
        return False
    
    logger.info(f"API –∫–ª—é—á: {api_key[:20]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        classifier = GenApiNewsClassifier(api_key=api_key)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        test_news = [
            {
                "title": "–í–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è",
                "content": "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–æ–≤—ã–µ –±–æ–µ–≤—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–µ –î–æ–Ω–µ—Ü–∫–∞. –ü–æ –¥–∞–Ω–Ω—ã–º –ú–∏–Ω–æ–±–æ—Ä–æ–Ω—ã, –Ω–∞—à–∏ –≤–æ–π—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.",
                "expected_category": "military_operations"
            },
            {
                "title": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å –±–µ–∂–µ–Ω—Ü–∞–º",
                "content": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—É—é –ø–æ–º–æ—â—å –≤ –∑–æ–Ω—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. –ü–æ–º–æ—â—å –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏.",
                "expected_category": "humanitarian_crisis"
            },
            {
                "title": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –†–æ—Å—Å–∏–∏",
                "content": "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–æ—é–∑ –≤–≤–µ–ª –Ω–æ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –†–æ—Å—Å–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏.",
                "expected_category": "economic_consequences"
            },
            {
                "title": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –ø–æ –£–∫—Ä–∞–∏–Ω–µ",
                "content": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –†–æ—Å—Å–∏–∏ –∏ –°–®–ê –ø—Ä–æ–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –û–±—Å—É–∂–¥–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.",
                "expected_category": "political_decisions"
            },
            {
                "title": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–π–Ω–∞",
                "content": "–í —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ. –≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –∏ –±–æ—Ä—å–±—ã —Å –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
                "expected_category": "information_social"
            }
        ]
        
        logger.info(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é {len(test_news)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        success_count = 0
        total_tokens = 0
        
        for i, news in enumerate(test_news, 1):
            logger.info(f"\n--- –ù–æ–≤–æ—Å—Ç—å {i} ---")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}")
            
            try:
                result = classifier.classify(news['title'], news['content'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                is_correct = result['category_name'] == news['expected_category']
                if is_correct:
                    success_count += 1
                    logger.info("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
                else:
                    logger.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å: {news['expected_category']}, –ø–æ–ª—É—á–µ–Ω–æ: {result['category_name']}")
                
                logger.info(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category_name']}")
                logger.info(f"  –ò–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏: {result['social_tension_index']}")
                logger.info(f"  –ò–Ω–¥–µ–∫—Å –≤—Å–ø–ª–µ—Å–∫–∞: {result['spike_index']}")
                logger.info(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                logger.info(f"  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {result.get('cached', False)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {i}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = classifier.get_stats()
        logger.info(f"\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        logger.info(f"–ò–∑ –∫—ç—à–∞: {stats['cached_requests']}")
        logger.info(f"API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['api_requests']}")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['tokens_used']}")
        logger.info(f"–û—à–∏–±–æ–∫: {stats['errors']}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        accuracy = (success_count / len(test_news)) * 100
        logger.info(f"\n=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===")
        logger.info(f"–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {accuracy:.1f}% ({success_count}/{len(test_news)})")
        
        if accuracy >= 80:
            logger.info("üéâ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
        elif accuracy >= 60:
            logger.info("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_base_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º"""
    logger.info("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BaseNewsParser —Å Gen-API ===")
    
    try:
        from parsers.base_parser import BaseNewsParser
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        parser = BaseNewsParser(
            source_name="test_source",
            base_url="https://example.com",
            enable_classification=True,
            enable_duplicate_check=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            enable_preprocessing=True
        )
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
        test_title = "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"
        test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º."
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é: {test_title}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        category, confidence, scores = parser.classify_article(test_title, test_content)
        
        if category:
            logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            logger.info(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            logger.info(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            logger.info(f"  –ò–Ω–¥–µ–∫—Å—ã: {scores}")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ BaseNewsParser: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–ê–†–°–ï–†–û–í –° GEN-API ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    classifier_ok = test_gen_api_classifier()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
    parser_ok = test_base_parser()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info("\n" + "=" * 60)
    logger.info("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 60)
    
    if classifier_ok and parser_ok:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–∞—Ö")
    else:
        logger.warning("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        if not classifier_ok:
            logger.warning("- –ü—Ä–æ–±–ª–µ–º—ã —Å Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")
        if not parser_ok:
            logger.warning("- –ü—Ä–æ–±–ª–µ–º—ã —Å BaseNewsParser")
    
    logger.info("=" * 60)

if __name__ == "__main__":
    main()
