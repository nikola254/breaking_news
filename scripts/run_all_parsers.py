#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
–ù–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ —Å Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
"""

import sys
import os
import time
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parsers_batch_run.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_parser(parser_function, parser_name, max_articles=10):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    print(f"\n{'='*60}")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: {parser_name}")
    print(f"{'='*60}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
        start_time = time.time()
        articles_count = parser_function()
        end_time = time.time()
        
        duration = end_time - start_time
        
        print(f"‚úÖ {parser_name}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {articles_count} —Å—Ç–∞—Ç–µ–π –∑–∞ {duration:.1f} —Å–µ–∫")
        logger.info(f"{parser_name}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {articles_count} —Å—Ç–∞—Ç–µ–π –∑–∞ {duration:.1f} —Å–µ–∫")
        
        return articles_count
        
    except Exception as e:
        print(f"‚ùå {parser_name}: –æ—à–∏–±–∫–∞ - {e}")
        logger.error(f"{parser_name}: –æ—à–∏–±–∫–∞ - {e}")
        return 0

def run_all_parsers():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ü–ê–†–°–ï–†–û–í –° GEN-API –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–û–ú")
    print("=" * 80)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –∫–ª–∞—Å—Å—ã)
    parsers = [
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        ("parsers.parser_lenta", "parse_lenta_news", "Lenta.ru"),
        ("parsers.parser_gazeta", "parse_gazeta_news", "Gazeta.ru"),
        ("parsers.parser_rbc", "parse_rbc_news", "RBC"),
        ("parsers.parser_kommersant", "parse_kommersant_news", "Kommersant"),
        ("parsers.parser_rt", "parse_rt_news", "RT"),
        ("parsers.parser_dw", "parse_dw_news", "Deutsche Welle"),
        
        # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        ("parsers.parser_cnn", "parse_cnn_news", "CNN"),
        ("parsers.parser_bbc", "parse_bbc_news", "BBC"),
        ("parsers.parser_reuters", "parse_reuters_news", "Reuters"),
        ("parsers.parser_euronews", "parse_euronews_news", "Euronews"),
        ("parsers.parser_france24", "parse_france24_news", "France24"),
        ("parsers.parser_aljazeera", "parse_aljazeera_news", "Al Jazeera"),
        
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        ("parsers.parser_unian", "parse_unian_news", "Unian"),
        ("parsers.parser_tsn", "parse_tsn_news", "TSN"),
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
        ("parsers.parser_telegram", "parse_telegram_news", "Telegram"),
        ("parsers.parser_twitter", "parse_twitter_news", "Twitter"),
    ]
    
    total_articles = 0
    successful_parsers = 0
    failed_parsers = 0
    
    start_time = time.time()
    
    for module_name, function_name, display_name in parsers:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏—é
            module = __import__(module_name, fromlist=[function_name])
            parser_function = getattr(module, function_name)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            articles_count = run_parser(parser_function, display_name, max_articles=5)
            
            if articles_count > 0:
                successful_parsers += 1
                total_articles += articles_count
            else:
                failed_parsers += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Å–µ—Ä–∞–º–∏
            time.sleep(2)
            
        except ImportError as e:
            print(f"‚ùå {display_name}: –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - {e}")
            logger.error(f"{display_name}: –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - {e}")
            failed_parsers += 1
        except Exception as e:
            print(f"‚ùå {display_name}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
            logger.error(f"{display_name}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
            failed_parsers += 1
    
    end_time = time.time()
    total_duration = end_time - start_time
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*80}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {successful_parsers}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {failed_parsers}")
    print(f"üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {total_articles}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_articles/total_duration:.1f} —Å—Ç–∞—Ç–µ–π/—Å–µ–∫")
    
    logger.info(f"–ò–¢–û–ì–û: {successful_parsers} —É—Å–ø–µ—à–Ω—ã—Ö, {failed_parsers} –Ω–µ—É–¥–∞—á–Ω—ã—Ö, {total_articles} —Å—Ç–∞—Ç–µ–π –∑–∞ {total_duration:.1f} —Å–µ–∫")

if __name__ == "__main__":
    print(f"üïê –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        run_all_parsers()
        print(f"\nüéâ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
