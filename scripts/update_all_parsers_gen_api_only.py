#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
"""

import os
import re
import glob

def update_parser_for_gen_api_only(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # 1. –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        content = re.sub(r'from parsers\.news_categories import classify_news, create_category_tables\n', '', content)
        content = re.sub(r'from parsers\.news_categories import classify_news\n', '', content)
        content = re.sub(r'from parsers\.news_categories import create_category_tables\n', '', content)
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # –ò—â–µ–º –±–ª–æ–∫ —Å filter_ukraine_relevance
        relevance_pattern = r'(relevance_result = filter_ukraine_relevance\([^)]+\)\s*\n\s*if not relevance_result\[\'is_relevant\'\]:[^}]+continue\s*\n\s*logger\.info\(f"–°—Ç–∞—Ç—å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞[^"]+\)\s*\n\s*logger\.info\(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:[^"]+\)\s*\n\s*# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏\s*\n\s*category = relevance_result\.get\(\'category\', \'other\'\))'
        
        new_classification_logic = '''relevance_result = filter_ukraine_relevance(title, content)
            
            if not relevance_result['is_relevant']:
                logger.info(f"–°—Ç–∞—Ç—å—è –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É (score: {relevance_result['relevance_score']:.2f})")
                continue
            
            logger.info(f"–°—Ç–∞—Ç—å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (score: {relevance_result['relevance_score']:.2f}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {relevance_result['category']})")
            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {relevance_result['keywords_found']}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gen-API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
            try:
                classifier = GenApiNewsClassifier()
                ai_result = classifier.classify(title, content)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                category = ai_result['category_name']
                social_tension_index = ai_result['social_tension_index']
                spike_index = ai_result['spike_index']
                ai_confidence = ai_result['confidence']
                ai_category = ai_result['category_name']
                
                logger.info(f"Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {category} (–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å: {social_tension_index}, –≤—Å–ø–ª–µ—Å–∫: {spike_index})")
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                # Fallback –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                category = relevance_result.get('category', 'other')
                social_tension_index = 0.0
                spike_index = 0.0
                ai_confidence = 0.0
                ai_category = category'''
        
        content = re.sub(relevance_pattern, new_classification_logic, content, flags=re.MULTILINE | re.DOTALL)
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        insert_pattern = r"client\.execute\(\s*'INSERT INTO news\.(\w+)_headlines \(([^)]+)\) VALUES',\s*\[\(([^)]+)\)\]\s*\)"
        
        def update_main_insert(match):
            table_name = match.group(1)
            fields = match.group(2)
            values = match.group(3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            new_fields = fields + ', social_tension_index, spike_index, ai_category, ai_confidence, ai_classification_metadata'
            new_values = values + ', social_tension_index, spike_index, ai_category, ai_confidence, \'gen_api_classification\''
            
            return f"client.execute(\n                'INSERT INTO news.{table_name}_headlines ({new_fields}) VALUES',\n                [({new_values})]\n            )"
        
        content = re.sub(insert_pattern, update_main_insert, content)
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        category_insert_pattern = r"client\.execute\(\s*f'INSERT INTO \{category_table\} \(([^)]+)\) VALUES',\s*\[\(([^)]+)\)\]\s*\)"
        
        def update_category_insert(match):
            fields = match.group(1)
            values = match.group(2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            new_fields = fields + ', social_tension_index, spike_index, ai_category, ai_confidence, ai_classification_metadata'
            new_values = values + ', social_tension_index, spike_index, ai_category, ai_confidence, \'gen_api_classification\''
            
            return f"client.execute(\n                    f'INSERT INTO {{category_table}} ({new_fields}) VALUES',\n                    [({new_values})]\n                )"
        
        content = re.sub(category_insert_pattern, update_category_insert, content)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def update_all_parsers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–ê–†–°–ï–†–û–í –î–õ–Ø GEN-API –¢–û–õ–¨–ö–û")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–æ–≤
    parser_files = glob.glob("parsers/parser_*.py")
    
    updated_count = 0
    total_count = len(parser_files)
    
    for file_path in parser_files:
        if update_parser_for_gen_api_only(file_path):
            updated_count += 1
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_count - updated_count}")

if __name__ == "__main__":
    update_all_parsers()
