#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
"""

import os
import re
import glob

def update_parser_for_gen_api(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        replacements = [
            # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            (r'from parsers\.news_categories import classify_news, create_category_tables\n', ''),
            (r'from parsers\.news_categories import classify_news\n', ''),
            (r'from parsers\.news_categories import create_category_tables\n', ''),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        # –ò—â–µ–º –º–µ—Å—Ç–æ, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è filter_ukraine_relevance
        relevance_pattern = r'(relevance_result = filter_ukraine_relevance\([^)]+\)\s*\n)'
        
        if re.search(relevance_pattern, content):
            # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            new_classification_logic = '''relevance_result = filter_ukraine_relevance(title, content)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gen-API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
            try:
                from parsers.gen_api_classifier import GenApiNewsClassifier
                classifier = GenApiNewsClassifier()
                ai_result = classifier.classify(title, content)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                category = relevance_result.get('category', ai_result['category_name'])
                social_tension_index = ai_result['social_tension_index']
                spike_index = ai_result['spike_index']
                ai_confidence = ai_result['confidence']
                ai_category = ai_result['category_name']
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ Gen-API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                # Fallback –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                category = relevance_result.get('category', 'other')
                social_tension_index = 0.0
                spike_index = 0.0
                ai_confidence = 0.0
                ai_category = category
'''
            
            content = re.sub(relevance_pattern, new_classification_logic, content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            save_pattern = r"(client\.execute\(\s*'INSERT INTO news\.\w+_headlines \([^)]+\) VALUES',\s*\[\([^)]+\)\]\s*\))"
            
            def update_save_logic(match):
                old_save = match.group(1)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ INSERT
                fields_match = re.search(r'INSERT INTO news\.(\w+)_headlines \(([^)]+)\) VALUES', old_save)
                if fields_match:
                    table_name = fields_match.group(1)
                    old_fields = fields_match.group(2)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    new_fields = old_fields + ', social_tension_index, spike_index, ai_category, ai_confidence, ai_classification_metadata'
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º VALUES
                    values_match = re.search(r'\[\(([^)]+)\)\]', old_save)
                    if values_match:
                        old_values = values_match.group(1)
                        new_values = old_values + f', {social_tension_index}, {spike_index}, "{ai_category}", {ai_confidence}, "gen_api_classification"'
                        
                        new_save = old_save.replace(old_fields, new_fields).replace(old_values, new_values)
                        return new_save
                
                return old_save
            
            content = re.sub(save_pattern, update_save_logic, content)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def update_all_parsers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ Gen-API"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–ê–†–°–ï–†–û–í –î–õ–Ø GEN-API")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–µ—Ä–æ–≤
    parser_files = glob.glob("parsers/parser_*.py")
    
    updated_count = 0
    total_count = len(parser_files)
    
    for file_path in parser_files:
        if update_parser_for_gen_api(file_path):
            updated_count += 1
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_count - updated_count}")

if __name__ == "__main__":
    update_all_parsers()
