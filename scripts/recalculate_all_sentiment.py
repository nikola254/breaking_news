"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ sentiment –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from clickhouse_driver import Client
from config import Config
from app.utils.ukraine_sentiment_analyzer import get_ukraine_sentiment_analyzer
from tqdm import tqdm

def get_clickhouse_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ClickHouse"""
    return Client(
        host=Config.CLICKHOUSE_HOST,
        port=Config.CLICKHOUSE_NATIVE_PORT,
        user=Config.CLICKHOUSE_USER,
        password=Config.CLICKHOUSE_PASSWORD,
        database=Config.CLICKHOUSE_DATABASE
    )

def recalculate_sentiment_for_table(client, analyzer, table_name, batch_size=100):
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç sentiment –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    Args:
        client: ClickHouse –∫–ª–∏–µ–Ω—Ç
        analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count_query = f"SELECT COUNT(*) FROM news.{table_name}"
        total_count = client.execute(count_query)[0][0]
        
        if total_count == 0:
            print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return 0
        
        print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {total_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏
        processed = 0
        updated = 0
        
        with tqdm(total=total_count, desc=f"  {table_name}") as pbar:
            offset = 0
            while offset < total_count:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø–∏—Å–µ–π
                query = f"""
                SELECT id, title, content
                FROM news.{table_name}
                LIMIT {batch_size} OFFSET {offset}
                """
                
                records = client.execute(query)
                
                if not records:
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
                for record_id, title, content in records:
                    try:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                        text_for_analysis = f"{title or ''} {content or ''}"
                        
                        if text_for_analysis.strip():
                            sentiment_result = analyzer.analyze_sentiment(text_for_analysis)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                            update_query = f"""
                            ALTER TABLE news.{table_name}
                            UPDATE 
                                sentiment_score = {sentiment_result['sentiment_score']},
                                positive_score = {sentiment_result['positive_score']},
                                negative_score = {sentiment_result['negative_score']}
                            WHERE id = '{record_id}'
                            """
                            
                            client.execute(update_query)
                            updated += 1
                        
                        processed += 1
                        pbar.update(1)
                        
                    except Exception as e:
                        print(f"\n  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {record_id}: {e}")
                        processed += 1
                        pbar.update(1)
                        continue
                
                offset += batch_size
        
        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
        return updated
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ sentiment –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    client = get_clickhouse_client()
    analyzer = get_ukraine_sentiment_analyzer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    tables_query = "SHOW TABLES FROM news"
    all_tables = [row[0] for row in client.execute(tables_query)]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
    excluded_tables = [
        'monitoring_sessions',
        'news_sources_extremism_analysis',
        'social_analysis_results',
        'social_media_extremism_analysis',
        'telegram_channels_stats',
        'telegram_classification_analytics',
        'user_sources',
        'ok_posts',
        'vk_posts',
        'twitter_posts'
    ]
    
    news_tables = [t for t in all_tables if t not in excluded_tables and not t.endswith('_headlines')]
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(news_tables)} —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    total_updated = 0
    for i, table in enumerate(news_tables, 1):
        print(f"\n[{i}/{len(news_tables)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        updated = recalculate_sentiment_for_table(client, analyzer, table)
        total_updated += updated
    
    print("\n" + "=" * 60)
    print(f"‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_updated}")
    print("=" * 60)

if __name__ == "__main__":
    main()
