#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ gen-api.ru –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from parsers.gen_api_classifier import GenApiNewsClassifier

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gen-api.ru –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get('GEN_API_KEY')
    
    if not api_key:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á gen-api.ru –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–∞–π–ª–µ .env:")
        logger.info("GEN_API_KEY=sk-fFv5kuV9ZZg4wNJuOY1RUGYv5KIf3dMkUeR27VclgRTprL1A04ucEN8lFwzr")
        return
    
    logger.info(f"API –∫–ª—é—á: {api_key[:20]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        classifier = GenApiNewsClassifier(api_key=api_key)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        test_news = [
            {
                "title": "–í–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –£–∫—Ä–∞–∏–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è",
                "content": "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–æ–≤—ã–µ –±–æ–µ–≤—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–µ –î–æ–Ω–µ—Ü–∫–∞. –ü–æ –¥–∞–Ω–Ω—ã–º –ú–∏–Ω–æ–±–æ—Ä–æ–Ω—ã, –Ω–∞—à–∏ –≤–æ–π—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞."
            },
            {
                "title": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –†–æ—Å—Å–∏–∏",
                "content": "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–æ—é–∑ –≤–≤–µ–ª –Ω–æ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –†–æ—Å—Å–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏."
            },
            {
                "title": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å –±–µ–∂–µ–Ω—Ü–∞–º",
                "content": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—É—é –ø–æ–º–æ—â—å –≤ –∑–æ–Ω—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. –ü–æ–º–æ—â—å –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏."
            }
        ]
        
        logger.info(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é {len(test_news)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        for i, news in enumerate(test_news, 1):
            logger.info(f"\n--- –ù–æ–≤–æ—Å—Ç—å {i} ---")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}")
            
            try:
                result = classifier.classify(news['title'], news['content'])
                
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                logger.info(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category_name']}")
                logger.info(f"  –ò–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏: {result['social_tension_index']}")
                logger.info(f"  –ò–Ω–¥–µ–∫—Å –≤—Å–ø–ª–µ—Å–∫–∞: {result['spike_index']}")
                logger.info(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                logger.info(f"  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {result.get('cached', False)}")
                logger.info(f"  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.get('reasoning', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è')}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {i}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = classifier.get_stats()
        logger.info(f"\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        logger.info(f"–ò–∑ –∫—ç—à–∞: {stats['cached_requests']}")
        logger.info(f"API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['api_requests']}")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['tokens_used']}")
        logger.info(f"–û—à–∏–±–æ–∫: {stats['errors']}")
        
        logger.info("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gen-api.ru ===")
    
    api_key = os.environ.get('GEN_API_KEY')
    
    if not api_key:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á")
        return
    
    try:
        import requests
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        url = "https://api.gen-api.ru/api/v1/networks/chat-gpt-3"
        
        test_data = {
            "messages": [
                {
                    "role": "user",
                    "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                }
            ],
            "is_sync": False,
            "max_tokens": 50
        }
        
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {api_key}'
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = requests.post(url, json=test_data, headers=headers, timeout=30)
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"Request ID: {result.get('request_id')}")
            logger.info(f"–°—Ç–∞—Ç—É—Å: {result.get('status')}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gen-api.ru –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_api_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    test_classifier()

if __name__ == "__main__":
    main()
