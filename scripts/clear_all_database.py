#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ ClickHouse
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import requests
from config import Config

def clear_all_database():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —á–µ—Ä–µ–∑ HTTP
        base_url = f"http://{Config.CLICKHOUSE_HOST}:{Config.CLICKHOUSE_PORT}"
        auth = (Config.CLICKHOUSE_USER, Config.CLICKHOUSE_PASSWORD) if Config.CLICKHOUSE_USER else None
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {Config.CLICKHOUSE_HOST}:{Config.CLICKHOUSE_PORT}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables_query = f"SELECT name FROM system.tables WHERE database = '{Config.CLICKHOUSE_DATABASE}'"
        
        response = requests.get(
            f"{base_url}/",
            params={'query': tables_query},
            auth=auth,
            timeout=30
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
            return False
        
        tables_text = response.text.strip()
        if not tables_text:
            print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return True
        
        tables = [line.strip() for line in tables_text.split('\n') if line.strip()]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        deleted_tables = []
        for table_name in tables:
            try:
                # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                drop_query = f"DROP TABLE IF EXISTS {Config.CLICKHOUSE_DATABASE}.{table_name}"
                
                response = requests.post(
                    f"{base_url}/",
                    data=drop_query,
                    auth=auth,
                    timeout=30
                )
                
                if response.status_code == 200:
                    deleted_tables.append(table_name)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {response.status_code} - {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        
        print(f"\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –£–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(deleted_tables)}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(deleted_tables)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞
        response = requests.get(
            f"{base_url}/",
            params={'query': tables_query},
            auth=auth,
            timeout=30
        )
        
        if response.status_code == 200 and not response.text.strip():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
        else:
            remaining_tables = [line.strip() for line in response.text.split('\n') if line.strip()]
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã: {remaining_tables}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    success = clear_all_database()
    
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
