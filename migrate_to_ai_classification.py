#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–∞ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
–ó–∞–º–µ–Ω—è–µ—Ç –≤—ã–∑–æ–≤—ã classify_news –Ω–∞ classify_news_ai —Å fallback
"""

import os
import re
from pathlib import Path

def backup_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{file_path}.backup"
    with open(file_path, 'r', encoding='utf-8') as original:
        with open(backup_path, 'w', encoding='utf-8') as backup:
            backup.write(original.read())
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

def update_parser_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if 'from .ai_news_classifier import classify_news_ai' in content or 'from ai_news_classifier import classify_news_ai' in content:
        print("‚ö†Ô∏è  AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç news_categories
    news_categories_import_pattern = r'from \.?news_categories import classify_news'
    if re.search(news_categories_import_pattern, content):
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ AI –≤–µ—Ä—Å–∏—é —Å fallback
        new_import = '''from .ai_news_classifier import classify_news_ai
from .news_categories import classify_news'''
        content = re.sub(news_categories_import_pattern, new_import, content)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        import_lines = []
        other_lines = []
        in_imports = True
        
        for line in content.split('\n'):
            if in_imports and (line.startswith('import ') or line.startswith('from ') or line.strip() == '' or line.startswith('#')):
                import_lines.append(line)
            else:
                in_imports = False
                other_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import_lines.extend([
            'from .ai_news_classifier import classify_news_ai',
            'from .news_categories import classify_news'
        ])
        
        content = '\n'.join(import_lines + other_lines)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤")
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã classify_news –Ω–∞ AI –≤–µ—Ä—Å–∏—é —Å fallback
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: category = classify_news(title, content)
    classify_pattern = r'(\s*)(\w+)\s*=\s*classify_news\(([^)]+)\)'
    
    def replace_classify_call(match):
        indent = match.group(1)
        var_name = match.group(2)
        params = match.group(3)
        
        return f'''{indent}try:
{indent}    {var_name} = classify_news_ai({params})
{indent}except Exception as e:
{indent}    print(f"AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {{e}}")
{indent}    {var_name} = classify_news({params})'''
    
    new_content = re.sub(classify_pattern, replace_classify_call, content)
    
    if new_content != content:
        print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω—ã –≤—ã–∑–æ–≤—ã classify_news –Ω–∞ AI –≤–µ—Ä—Å–∏—é")
        content = new_content
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if content != original_content:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        print("‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–∞ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    parser_files = [
        'parsers/parser_bbc.py',
        'parsers/parser_lenta.py', 
        'parsers/parser_unian.py',
        'parsers/parser_france24.py',
        'parsers/parser_ria.py',
        'parsers/parser_israil.py',
        'parsers/parser_dw.py',
        'parsers/parser_tsn.py',
        'parsers/parser_euronews.py',
        'parsers/parser_rt.py',
        'parsers/parser_rbc.py',
        'parsers/parser_reuters.py',
        'parsers/parser_cnn.py',
        'parsers/parser_kommersant.py',
        'parsers/parser_aljazeera.py',
        'parsers/parser_gazeta.py',
        'parsers/universal_parser.py'
    ]
    
    updated_files = []
    skipped_files = []
    
    for parser_file in parser_files:
        file_path = Path(parser_file)
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {parser_file}")
            skipped_files.append(parser_file)
            continue
        
        try:
            if update_parser_file(file_path):
                updated_files.append(parser_file)
            else:
                skipped_files.append(parser_file)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {parser_file}: {e}")
            skipped_files.append(parser_file)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(updated_files)}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(skipped_files)}")
    
    if updated_files:
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in updated_files:
            print(f"  - {file}")
    
    if skipped_files:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in skipped_files:
            print(f"  - {file}")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
    print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
    print("  3. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup")
    print("  4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ .backup —Ñ–∞–π–ª–æ–≤")
    
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()